* Tasks
** TODO 学习的工具 [0%]
   SCHEDULED: <2017-01-04 周三 22:55>
*** TODO emacs
**** TODO spacemacs
***** distribution 
       + spacemacs 
         开箱即用
       + spacemacs-base
***** .spacemacs
****** user-init()
        加上镜像的地址,从 emacs china 寻找镜像
      #+BEGIN_SRC lisp
      (setq configuration-layer-elpa-archives '(("melpa-cn" ...
      #+END_SRC
****** space 键弹出的窗口使用的 which-key.el
        + sp f e d  -> .spacemacs 文件
****** ivy C-s 使用 Swiper 进行搜索
****** maxixed 在当前桌面启动时最大化
****** sp h sp 查看插件安完了哪些 Package
        Spacemacs Layers and packages: ivy
****** 可以去除一些包
****** 安装 package
       不可以直接使用 package-install，退出以后，包就不存在了。正确方式是自己添加到.spacemacs->
****** 先把所有的配置放在 user-config 里面
**** TODO org-mode
***** TODO org-mode 添加任务提醒
      内容请看这个网页
      https://www.cnblogs.com/ibgo/p/4508802.html
***** TODO 捕获传发存档
      :LOGBOOK:
      CLOCK: <2017-01-07 周六 13:22>--<2017-01-07 周六 13:53> =>  0:31
      :END:
      1. 捕获
         1) [X] 设置截取位置
            #+BEGIN_SRC lisp
              (setq org-default-notes-file "d:/git/workspace/notes.org")
              (define-key global-map "\C-cc" 'org-capture)
            #+END_SRC
         2) [X] 键 
            |---------+----------------------|
            | C-c c   | 启动一个捕获过程     |
            | C-c C-c | 保存结束             |
            | C-c C-w | 指定保存地址，并结束 |
            | C-c C-k | 取消，结束           |
            |---------+----------------------|
         3) [X] 模板
            #+BEGIN_SRC elisp
              '(org-capture-templates
                (quote (
                        ;; 任务
                        ("t" "Todo"    entry (file+headline "d:/git/workspace/tasks.org" "Tasks") "* TODO %? Entered on %T\n")
                        ;; 日记
                        ("j" "Journal" entry (file+datetree "d:/git/workspace/journal.org")       "* %? Entered on %U\n %i\n %a")
                        ;; 书单
                        ("b" "Book"    entry (file+headline "d:/git/workspace/books.org" "Books") "* TODO 《%?》 Entered on %T\n")
                        )))
            #+END_SRC

      2. 转送笔记
         | C-c C-w     | 转送光标处的条目或者区域。org-refile-targets |
         
      3. 归档
         |----------------------+------------------------------------------------------------|
         | C-c C-x C-a          | 用变量 orgarchive-default-command 指定的命令归档当前的项。 |
         | C-c C-x C-s 或 C-c $ | 将光标处的子树归档至 org-archive-localtion 指定的位置      |
         |----------------------+------------------------------------------------------------|
         
***** DONE Block until (two) is done
      CLOSED: [2017-01-07 周六 17:13]
****** DONE one
       CLOSED: [2017-01-07 周六 17:12]
****** DONE two
       CLOSED: [2017-01-07 周六 17:12]
       这样设置
       #+BEGIN_SRC elisp
         (setq org-enforce-todo-dependencies)
       #+END_SRC
***** DONE 子任务必须按顺序 Block
      CLOSED: [2017-01-07 周六 17:12]
      :PROPERTIES:
      :ORDERED:  t
      :END:
****** DONE a
       CLOSED: [2017-01-07 周六 17:12]
****** DONE b, needs to wait for (a)
       CLOSED: [2017-01-07 周六 17:12]
****** DONE c, needs to wait for (a) and (b)
       CLOSED: [2017-01-07 周六 17:12]
*** TODO git [100%]
**** DONE 创建版本库
     CLOSED: [2017-01-07 周六 19:16]
     |----------------+-----------------------------------------------|
     | mkdir learngit | 创建目录                                      |
     | cd learngit    |                                               |
     | git init       | 变成 git 可以管理的仓库（多了一个.git 文件夹) |
     |----------------+-----------------------------------------------|
**** DONE 添加文件到版本库中
     CLOSED: [2017-01-07 周六 19:16]
     |--------------------+----------------------|
     | git add readme.txt | 添加到 stage(暂存区) |
     |--------------------+----------------------|
**** DONE 提交到
     CLOSED: [2017-01-07 周六 19:16]
     |------------------------+--------------------------------|
     | git commit -m "日志"   | 添加到 master 分支(默认创建的) |
     |------------------------+--------------------------------|
     commit 之后，暂存区(stage)内就没有内容了,东西被提交到版本库的 master 分支中
**** DONE 显示状态&比较
     CLOSED: [2017-01-07 周六 19:18]
     |---------------------+--------------|
     | git status          | 显示当前状态 |
     | git diff readme.txt | 比较文件     |
     |---------------------+--------------|
**** DONE 版本回退
     CLOSED: [2017-01-07 周六 22:02]
     |-----------------------------------+------------------------------------------------|
     | git log                           | 查看 git commit -m 提交的日志                  |
     | git log --pretty=oneline          | 同上                                           |
     | git reset --hard HEAD^            | 回退到上一个版本                               |
     | git reset --hard 版本号(不必写全) | 同上                                           |
     | git reflog                        | 查看命令历史,当 reset 之后，还可以跳回到高版本 |
     |-----------------------------------+------------------------------------------------|
     默认新建一个 master 分支,内部有一个指针 head,指向当前分支的当前版本
**** DONE 撤销修改
     CLOSED: [2017-01-07 周六 22:15]
     |---------------------------+---------------------------------------------|
     | git checkout -- 文件名    | 丢弃工作区的修改  -- 很重要                 |
     |                           | 即回到最近一次 git commit or git add 的状态 |
     |                           | 还没有 git add 直接返回到修改之前的状态     |
     |                           | 己经   git add 返因到暂存区的状态           |
     | git reset HEAD readme.txt | 把暂存区的内容撤销掉(unstage)               |
     |---------------------------+---------------------------------------------|
**** DONE 删除文件
     CLOSED: [2017-01-07 周六 22:17]
     |------------------------+--------------------|
     | git rm 文件名          | 从版本库中删除文件 |
     | git checkout -- 文件名 | 恢复文件           |
     |                        |                    |
     |------------------------+--------------------|
**** DONE 远程仓库
     CLOSED: [2017-01-07 周六 22:29]
***** DONE 用户密码等
      CLOSED: [2017-01-07 周六 22:29]
      1. 创建 SSH Key
         ssh-keygen -t rsa -C "email.com", .ssh/id_ras,id_rsa.pub(公钥)
      2. 登录 Github 上传 key(id_ras.pub)
***** DONE 添加远程仓库
      CLOSED: [2017-01-07 周六 22:29]
      git remote add origin git@github.com:github 账户名/learngit.git
      1. git add
      2. git commit -m ""
      3. git push -u origin master
         -u 首次 push 使用，可以让本地的 master 和远程的 master 关联起来，以后再推送就不用传这个参数了
***** DONE 从远程仓库克隆
      CLOSED: [2017-01-07 周六 22:29]
      多种方式,协义不同
      + git clone git@github.com:用户名/learngit.git
        速度最快，原生支持。
      + git clone https://github.com/用户名/learngit.git
        速度慢，每次要输入口令。
*** TODO Linux [%]
*** TODO TensorFlow 用于人工智能的开源神器 [%] Entered on <2017-01-08 周日 08:43>
** TODO 开会，讨论前几章练一练 [0%]Entered on <2017-01-09 周一 14:24>
   SCHEDULED: <2017-01-10 周二 09:00>
   :LOGBOOK:
   CLOCK: [2017-01-10 周二 09:30]--[2017-01-10 周二 17:52] =>  0:00
   :END:
** TODO 把测试文档传给隋妍妍 [0%]Entered on <2017-01-10 周二 17:53>
   DEADLINE: <2017-01-11 周三 08:35>
